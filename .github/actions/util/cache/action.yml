name: cache
description: Setup cache

inputs:
  path:
    description: 'Cache path'
    required: true
  key:
    description: 'Cache key'
    required: true
  modify_cache:
    description: 'Decides if cache should be modified or restored only'
    required: true
  restore_keys:
    description: 'Cache restore keys'
    default: ''
    required: false

outputs:
  cache_hit:
    description: 'Cache hit'
    value: ${{ steps.cache_hit_check.outputs.cache_hit }}

runs:
  using: "composite"

  steps:
    # Setup cache (with restore keys)
    - name: Setup cache
      id: setup_cache
      if: inputs.modify_cache == 'true' && inputs.restore_keys != ''
      uses: actions/cache@v3
      with:
        path: ${CACHE_PATH}
        key: ${{ inputs.key }}
        restore-keys: |-
          ${{ inputs.restore_keys }}
      env:
        CACHE_PATH: ${{ inputs.path }}

    # Setup cache (without restore keys)
    - name: Setup cache
      id: setup_cache2
      if: inputs.modify_cache == 'true' && inputs.restore_keys == ''
      uses: actions/cache@v3
      with:
        path: ${CACHE_PATH}
        key: ${{ inputs.key }}
      env:
        CACHE_PATH: ${{ inputs.path }}

    # Restore cache
    - name: Restore cache
      id: restore_cache
      if: inputs.modify_cache == 'false'
      uses: actions/cache/restore@v3
      with:
        path: ${{ inputs.path }}
        key: ${{ inputs.key }}
        restore-keys: ${{ inputs.restore_keys }}

    # Check if we hit the cache
    - name: Check if we hit the cache
      id: cache_hit_check
      shell: bash
      run: |
        if [[ "${{ steps.restore_cache.outputs.cache-hit }}" == "true" ]]; then
          cache_hit=true
        elif [[ "${{ steps.setup_cache.outputs.cache-hit }}" == "true" ]]; then
          cache_hit=true
        elif [[ "${{ steps.setup_cache2.outputs.cache-hit }}" == "true" ]]; then
          cache_hit=true
        else
          cache_hit=false
        fi
        echo "cache_hit=$cache_hit" >> $GITHUB_OUTPUT