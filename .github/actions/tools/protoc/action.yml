name: protoc
description: Make protoc available on the path

inputs:
  github-token:
    description: 'GitHub token - used to bypass rate limits'
    required: true
  create-cache:
    description: 'Create cache in case it does not exist'
    required: true

runs:
  using: "composite"
  steps:
    # Gather release information
    - id: release_info
      shell: bash
      run: |
        # Cache release website
        curl -H "Authorization: token ${{ inputs.github-token }}" -s https://api.github.com/repos/protocolbuffers/protobuf/releases/latest > $RUNNER_TEMP/protobuf-release.json
        
        # Get latest release version
        release_version=$(cat $RUNNER_TEMP/protobuf-release.json | grep "tag_name" | grep -oE '[0-9]+\.[0-9]+(\.[0-9]+)?')
        
        # Get download URL
        if [[ '${{ runner.os }}' == 'Linux' ]]; then
          download_url=$(cat $RUNNER_TEMP/protobuf-release.json | grep "browser_download_url.*linux-x86_64.zip" | cut -d : -f 2,3 | tr -d \")
        elif [[ '${{ runner.os }}' == 'macOS' ]]; then
          download_url=$(cat $RUNNER_TEMP/protobuf-release.json | grep "browser_download_url.*osx-x86_64.zip" | cut -d : -f 2,3 | tr -d \")
        elif [[ '${{ runner.os }}' == 'Windows' ]]; then
          download_url=$(cat $RUNNER_TEMP/protobuf-release.json | grep "browser_download_url.*win64.zip" | cut -d : -f 2,3 | tr -d \")
        else 
          echo "Unknown OS"
          exit 1
        fi
        
        # Save release information
        echo "release_version=$release_version" >> $GITHUB_OUTPUT
        echo "download_url=$download_url" >> $GITHUB_OUTPUT

    # Setup protoc cache
    - if: inputs.create-cache == 'true'
      id: setup_protoc_cache
      uses: actions/cache@v3
      with:
        path: ~/.local/protoc
        key: protoc-${{ runner.os }}-${{ steps.release_info.outputs.release_version }}

    # Restore protoc cache
    - if: inputs.create-cache == 'false'
      id: restore_protoc_cache
      uses: actions/cache/restore@v3
      with:
        path: ~/.local/protoc
        key: protoc-${{ runner.os }}-${{ steps.release_info.outputs.release_version }}
        fail-on-cache-miss: true

    # Install protoc
    - if: steps.setup_protoc_cache.outputs.cache-hit != 'true' && steps.restore_protoc_cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        # Download and extract into ~/.local
        curl -H "Authorization: token ${{ inputs.github-token }}" -L ${{ steps.release_info.outputs.download_url }} -o $RUNNER_TEMP/protoc.zip
        unzip $RUNNER_TEMP/protoc.zip -d ~/.local/protoc

    # Add protoc to path
    - uses: ./.github/actions/util/add-to-path
      with:
        path: $HOME/.local/protoc/bin
