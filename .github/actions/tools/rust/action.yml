name: rust
description: Setup rust

inputs:
  github-token:
    description: 'GitHub token - used to bypass rate limits'
    required: true
  create-cache:
    description: 'Create cache in case it does not exist'
    required: true

runs:
  using: "composite"

  steps:
    # Setup build cache
    - if: inputs.create-cache == 'true'
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: rust-build-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}

    # Restore build cache
    - name: Restore rust build cache
      if: inputs.create-cache == 'false'
      uses: actions/cache/restore@v3
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: rust-build-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
        fail-on-cache-miss: true

    # Gather release information
    - id: release_info
      shell: bash
      run: |
        # Cache release website
        curl -H "Authorization: token ${{ inputs.github-token }}" -s https://api.github.com/repos/rust-lang/rust/releases/latest > $RUNNER_TEMP/rustc-release.json
        
        # Get latest release version
        release_version=$(cat $RUNNER_TEMP/rustc-release.json | grep "tag_name" | grep -oE '[0-9]+\.[0-9]+(\.[0-9]+)?')
        
        # Save release information
        echo "release_version=$release_version" >> $GITHUB_OUTPUT

    # Setup rust cache
    - if: inputs.create-cache == 'true'
      id: setup_rust_cache
      uses: actions/cache@v3
      with:
        path: ~/.cargo/bin/
        key: rust-${{ runner.os }}-${{ steps.release_info.outputs.release_version }}

    # Restore rust cache
    - if: inputs.create-cache == 'false'
      id: restore_rust_cache
      uses: actions/cache/restore@v3
      with:
        path: ~/.cargo/bin/
        key: rust-${{ runner.os }}-${{ steps.release_info.outputs.release_version }}
        fail-on-cache-miss: true

    # Install rust in case no cache was found
    - if: steps.restore_rust_cache.outputs.cache-hit != 'true' && steps.setup_rust_cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        # Download rustup-init
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs -o $RUNNER_TEMP/rustup-init.sh
        
        # Install rustup
        sh $RUNNER_TEMP/rustup-init.sh -y --no-modify-path --default-toolchain ${{ steps.release_info.outputs.release_version }} --component rustfmt clippy

    # Add rust to path
    - uses: ./.github/actions/util/add-to-path
      with:
        path: ~/.cargo/bin
